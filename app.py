import gradio as gr
import os
import json
import re
from gdown import download as gdown_download

# Google Drive API importok
from pydrive2.auth import GoogleAuth
from pydrive2.drive import GoogleDrive

# --- F√°jl- √©s Be√°ll√≠t√°skezel√©s ---
TEMP_DIR = "data"
os.makedirs(TEMP_DIR, exist_ok=True)
VIDEO_PATH = os.path.join(TEMP_DIR, "video.mp4")
SUBTITLE_PATH = os.path.join(TEMP_DIR, "subtitle.vtt")
SETTINGS_FILE = os.path.join(TEMP_DIR, "settings.json")

# A Render a titkos f√°jlt itt teszi el√©rhet≈ëv√©
SERVICE_ACCOUNT_FILE = '/etc/secrets/service_account.json'

# Glob√°lis v√°ltoz√≥k a f√°jlok t√°rol√°s√°ra
video_file_map = {}
subtitle_file_map = {}
drive = None

# --- Google Drive API Hiteles√≠t√©s ---

def authenticate_gdrive():
    """Hiteles√≠ti az alkalmaz√°st a Google Drive API-val a Service Account seg√≠ts√©g√©vel."""
    global drive
    if drive:
        return drive
    
    try:
        gauth = GoogleAuth()
        # Pr√≥b√°lja meg a szolg√°ltat√°sfi√≥k hiteles√≠t√©st
        gauth.auth_method = 'service'
        gauth.service_config_file = SERVICE_ACCOUNT_FILE
        gauth.Authorize()
        drive = GoogleDrive(gauth)
        return drive
    except Exception as e:
        print(f"Hiba a Google Drive hiteles√≠t√©s sor√°n: {e}")
        return None

# --- Mappa- √©s F√°jlkezel≈ë F√ºggv√©nyek ---

def get_id_from_link(link):
    """Kinyeri a Google Drive Mappa ID-t a megoszt√°si linkb≈ël."""
    match = re.search(r'/folders/([a-zA-Z0-9_-]+)', link)
    if match:
        return match.group(1)
    return None

def list_files_in_folder(folder_id):
    """List√°zza az √∂sszes f√°jlt (n√©v, id) egy adott GDrive mappa ID alatt."""
    drive_instance = authenticate_gdrive()
    if not drive_instance:
        raise gr.Error("Google Drive hiteles√≠t√©s sikertelen. Ellen≈ërizd a service_account.json f√°jlt a Render-en.")
        
    file_map = {}
    try:
        # 'q' param√©ter: 'FOLDER_ID' in parents (sz√ºl≈ë mappa) and trashed=false (nincs a kuk√°ban)
        file_list = drive_instance.ListFile({'q': f"'{folder_id}' in parents and trashed=false"}).GetList()
        for f in file_list:
            file_map[f['title']] = f['id']
        return file_map
    except Exception as e:
        raise gr.Error(f"Hiba a f√°jlok list√°z√°sakor: {e}. Ellen≈ërizd, hogy a mapp√°k meg vannak-e osztva a service fi√≥kkal.")

def populate_file_lists(video_folder_link, subtitle_folder_link):
    """Beolvassa a mapp√°kat √©s felt√∂lti a glob√°lis f√°jllist√°kat."""
    global video_file_map, subtitle_file_map
    
    video_folder_id = get_id_from_link(video_folder_link)
    subtitle_folder_id = get_id_from_link(subtitle_folder_link)
    
    if not video_folder_id:
        return "‚ùå Hiba: √ârv√©nytelen vide√≥ mappa link.", gr.Dropdown.update(choices=[], interactive=False)
        
    if not subtitle_folder_id:
        return "‚ùå Hiba: √ârv√©nytelen felirat mappa link.", gr.Dropdown.update(choices=[], interactive=False)

    try:
        video_file_map = list_files_in_folder(video_folder_id)
        subtitle_file_map = list_files_in_folder(subtitle_folder_id)
        
        video_filenames = sorted(list(video_file_map.keys()))
        
        if not video_filenames:
            return "‚ÑπÔ∏è A vide√≥ mappa √ºres vagy nem siker√ºlt beolvasni.", gr.Dropdown.update(choices=[], interactive=False)
            
        return f"‚úÖ Sikeresen beolvasva {len(video_filenames)} vide√≥. V√°lassz egyet!", gr.Dropdown.update(choices=video_filenames, value=None, interactive=True)
    
    except Exception as e:
        return str(e), gr.Dropdown.update(choices=[], interactive=False)

def load_selected_video(video_filename):
    """
    Let√∂lti a kiv√°lasztott vide√≥t √©s a hozz√° (n√©v alapj√°n) ill≈ë feliratot.
    """
    if not video_filename:
        return "V√°lassz egy vide√≥t.", gr.Video.update(value=None, subtitles=None)

    # 1. T√∂r√∂lj√ºk a kor√°bbi f√°jlokat
    if os.path.exists(VIDEO_PATH): os.remove(VIDEO_PATH)
    if os.path.exists(SUBTITLE_PATH): os.remove(SUBTITLE_PATH)

    results = []
    
    # 2. Vide√≥ ID √©s let√∂lt√©s
    video_id = video_file_map.get(video_filename)
    if not video_id:
        return "‚ùå Hiba: A vide√≥ ID nem tal√°lhat√≥.", gr.Video.update()
        
    try:
        gdown_download(id=video_id, output=VIDEO_PATH, quiet=True)
        results.append(f"‚úÖ Vide√≥ let√∂ltve: {video_filename}")
    except Exception as e:
        results.append(f"‚ùå Hiba a vide√≥ let√∂lt√©sekor: {e}")
        return "\n".join(results), gr.Video.update(value=None, subtitles=None)

    # 3. Megfelel≈ë felirat keres√©se √©s let√∂lt√©se
    video_name_without_ext = os.path.splitext(video_filename)[0]
    
    # Keres√ºnk egyez≈ë nev≈± feliratot (pl. .vtt, .srt)
    subtitle_id = None
    for subtitle_filename, s_id in subtitle_file_map.items():
        if os.path.splitext(subtitle_filename)[0] == video_name_without_ext:
            subtitle_id = s_id
            break
            
    if subtitle_id:
        try:
            # A SUBTITLE_PATH nev≈± f√°jlba mentj√ºk, f√ºggetlen√ºl az eredeti n√©vt≈ël
            gdown_download(id=subtitle_id, output=SUBTITLE_PATH, quiet=True)
            results.append(f"‚úÖ Hozz√°ill≈ë felirat megtal√°lva √©s let√∂ltve.")
        except Exception as e:
            results.append(f"‚ùå Hiba a felirat let√∂lt√©sekor: {e}")
    else:
        results.append("‚ÑπÔ∏è Nem tal√°lhat√≥ hozz√°ill≈ë felirat.")

    # 4. Lej√°tsz√≥ friss√≠t√©se
    video_file = VIDEO_PATH if os.path.exists(VIDEO_PATH) else None
    subtitle_file = SUBTITLE_PATH if os.path.exists(SUBTITLE_PATH) else None

    return "\n".join(results), gr.Video.update(value=video_file, subtitles=subtitle_file)


# --- Felirat St√≠lus (V√°ltozatlan) ---

DEFAULT_SETTINGS = {
    "color": "#FFFFFF", "size": "medium", "background": "transparent", "position": "bottom"
}

def load_settings():
    if os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, 'r') as f:
            return json.load(f)
    return DEFAULT_SETTINGS

def save_settings(settings):
    with open(SETTINGS_FILE, 'w') as f:
        json.dump(settings, f)

def set_subtitle_style(color, size, background, position):
    settings = load_settings()
    settings.update({
        "color": color, "size": size, "background": background, "position": position
    })
    save_settings(settings)
    return f"‚úÖ Feliratst√≠lus mentve! (A megjelen√©s a b√∂ng√©sz≈ët≈ël f√ºgg)"

# --- Gradio UI fel√©p√≠t√©se ---

with gr.Blocks(title="Render Vide√≥lej√°tsz√≥ (Mapp√°s)") as demo:
    gr.Markdown("# üé¨ Render Vide√≥lej√°tsz√≥ (Mappa B√∂ng√©sz≈ëvel)")
    gr.Markdown("Add meg a **nyilv√°nos Google Drive mappa linkeket**. A mapp√°knak meg kell lenni√ºk osztva a h√°tt√©rben fut√≥ szolg√°ltat√°sfi√≥kkal (l√°sd a be√°ll√≠t√°si √∫tmutat√≥t).")
    
    with gr.Row():
        video_folder_input = gr.Textbox(label="Vide√≥ Mappa Linkje", placeholder="https://drive.google.com/drive/folders/...")
        subtitle_folder_input = gr.Textbox(label="Felirat Mappa Linkje", placeholder="https://drive.google.com/drive/folders/...")
        
    list_files_btn = gr.Button("üìÅ Mapp√°k Beolvas√°sa")
    
    gr.Markdown("---")
    
    with gr.Row():
        video_dropdown = gr.Dropdown(label="V√°lassz egy vide√≥t", interactive=False)
        download_output = gr.Textbox(label="Let√∂lt√©s √Ållapota", interactive=False, scale=2)
        
    player = gr.Video(
        label="A Vide√≥lej√°tsz√≥",
        width=800
    )
    
    # --- UI Esem√©nykezel≈ëk ---
    
    # 1. Gombnyom√°sra beolvassa a mapp√°kat √©s friss√≠ti a dropdown list√°t
    list_files_btn.click(
        fn=populate_file_lists,
        inputs=[video_folder_input, subtitle_folder_input],
        outputs=[download_output, video_dropdown]
    )
    
    # 2. Amikor a felhaszn√°l√≥ v√°laszt a list√°b√≥l, elindul a let√∂lt√©s √©s a lej√°tsz√≥ friss√≠t√©se
    video_dropdown.change(
        fn=load_selected_video,
        inputs=[video_dropdown],
        outputs=[download_output, player]
    )

    gr.Markdown("---")
    
    # 3. Felirat Be√°ll√≠t√°sok (V√°ltozatlan)
    settings = load_settings()
    gr.Markdown("## üé® Felirat St√≠lus Be√°ll√≠t√°sok (Perzisztens Ment√©s)")

    with gr.Row():
        color_input = gr.Textbox(label="Bet≈±sz√≠n (CSS k√≥d)", value=settings["color"])
        size_input = gr.Radio(["small", "medium", "large"], label="M√©ret", value=settings["size"])
        background_input = gr.Textbox(label="H√°tt√©r (CSS k√≥d)", value=settings["background"])
        position_input = gr.Radio(["top", "bottom"], label="Elhelyezked√©s", value=settings["position"])
        
    style_btn = gr.Button("üíæ Felirat St√≠lus Ment√©se")
    style_output = gr.Textbox(label="St√≠lus Ment√©s √Ållapota", interactive=False)

    style_btn.click(
        fn=set_subtitle_style,
        inputs=[color_input, size_input, background_input, position_input],
        outputs=style_output
    )

# --- Alkalmaz√°s Ind√≠t√°sa ---
if __name__ == "__main__":
    # El≈ëre hiteles√≠t√ºnk ind√≠t√°skor, hogy gyorsabb legyen az els≈ë k√©r√©s
    authenticate_gdrive()
    
    port = int(os.environ.get("PORT", 7860))
    demo.launch(server_name="0.0.0.0", server_port=port)
